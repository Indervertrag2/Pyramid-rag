version: '3.9'

services:
  # PostgreSQL with pgvector
  postgres:
    image: ankane/pgvector:v0.5.1
    container_name: pyramid-postgres
    environment:
      POSTGRES_DB: pyramid_rag
      POSTGRES_USER: pyramid
      POSTGRES_PASSWORD: pyramid_secure_pass
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "15432:5432"
    networks:
      - pyramid-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pyramid -d pyramid_rag"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and Celery
  redis:
    image: redis:7-alpine
    container_name: pyramid-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "16379:6379"
    networks:
      - pyramid-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Ollama for LLM with GPU support
  ollama:
    image: ollama/ollama:latest
    container_name: pyramid-ollama
    volumes:
      - ollama_data:/root/.ollama
    ports:
      - "11434:11434"
    networks:
      - pyramid-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    environment:
      - OLLAMA_HOST=0.0.0.0
    healthcheck:
      test: ["CMD-SHELL", "ollama list || exit 1"]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 60s

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: pyramid-backend
    env_file:
      - ./backend/.env
    volumes:
      - ./backend:/app
      - document_storage:/app/data
    ports:
      - "18000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
    networks:
      - pyramid-network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Celery Worker
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: pyramid-celery-worker
    env_file:
      - ./backend/.env
    volumes:
      - ./backend:/app
      - document_storage:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - pyramid-network
    command: celery -A app.workers.celery_app worker --loglevel=info --concurrency=4
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Celery Beat (Scheduler)
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: pyramid-celery-beat
    env_file:
      - ./backend/.env
    volumes:
      - ./backend:/app
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - pyramid-network
    command: celery -A app.workers.celery_app beat --loglevel=info

  # Flower (Celery monitoring)
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: pyramid-flower
    env_file:
      - ./backend/.env
    ports:
      - "5555:5555"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - pyramid-network
    command: celery -A app.workers.celery_app flower --port=5555

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: pyramid-frontend
    ports:
      - "3002:3000"
    environment:
      - VITE_API_URL=http://localhost:18000
    networks:
      - pyramid-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: pyramid-nginx
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - pyramid-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: pyramid-prometheus
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    networks:
      - pyramid-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: pyramid-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - pyramid-network

networks:
  pyramid-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ollama_data:
    driver: local
  document_storage:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DOCUMENT_STORAGE_PATH:-./data/documents}
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local